//JPQL - 다형성 쿼리
    //TYPE
    // 조회 대상을 특정 자식으로 한정
    // 예) Item 중에 Book, Movie를 조회
    // [JPQL]
    // select i from Item i where type(i) IN (Book, Movie)
    // [SQL]
    // select i from i where i.DTYPE in (‘B’, ‘M’)

    //TREAT(JPA 2.1)
    // 자바의 타입 캐스팅과 유사
    // 상속 구조에서 부모 타입을 특정 자식 타입으로 다룰 때 사용
    // FROM, WHERE, SELECT(하이버네이트 지원) 사용
    // 예) 부모인 Item과 자식 Book이 있다.
    // [JPQL]
    // select i from Item i where treat(i as Book).auther = ‘kim’
    // [SQL]
    // select i.* from Item i where i.DTYPE = ‘B’ and i.auther = ‘k
//----------------------------------------------------------------------
    //엔티티 직접 사용 - 기본 키 값
    // JPQL에서 엔티티를 직접 사용하면 SQL에서 해당 엔티티의 기본 키 값을 사용
    // [JPQL]
    // select count(m.id) from Member m //엔티티의 아이디를 사용
    // select count(m) from Member m //엔티티를 직접 사용
    // [SQL](JPQL 둘다 같은 다음 SQL 실행)
    // select count(m.id) as cnt from Member m
    //엔티티 직접 사용 - 외래 키 값
    //
//----------------------------------------------------------------------
    //Named 쿼리 - 정적 쿼리
    // 미리 정의해서 이름을 부여해두고 사용하는 JPQL
    // 정적 쿼리만 가능 (동적 불가)
    // 어노테이션, XML에 정의
    // 애플리케이션 로딩 시점에 초기화 후 재사용
    // 애플리케이션 로딩 시점에 쿼리를 검증
    //어노테이션 - @NamedQuery
//----------------------------------------------------------------------
    //벌크 연산
    // 쿼리 한 번으로 여러 테이블 로우 변경(엔티티)
    // executeUpdate()의 결과는 영향받은 엔티티 수 반환
    // UPDATE, DELETE 지원
    // INSERT(insert into .. select, 하이버네이트 지원)

    //벌크 연산 주의
    // 벌크 연산은 영속성 컨텍스트를 무시하고 데이터베이스에 직접 쿼리
    // 벌크 연산을 먼저 실행
    // 벌크 연산 수행 후 영속성 컨텍스트 초기화