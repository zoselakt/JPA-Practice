 //JPQL 기본 함수
    // CONCAT
    // SUBSTRING
    // TRIM
    // LOWER, UPPER
    // LENGTH
    // LOCATE
    // ABS, SQRT, MOD
    // SIZE, INDEX(JPA 용도)

    //사용자 정의 함수 호출 (기본함수외 db내 함수를 부르고 싶을때)
    //하이버네이트는 사용전 방언에 추가해야 한다.
    //• 사용하는 DB 방언을 상속받고, 사용자 정의 함수를 등록한다.
    //select function('group_concat', i.name) from Item i

    //경로 표현식
    // .(점)을 찍어 객체 그래프를 탐색하는 것

    //경로 표현식 용어 정리
    // 상태 필드(state field): 단순히 값을 저장하기 위한 필드 (ex: m.username)
    // 연관 필드(association field): 연관관계를 위한 필드
    // 단일 값 연관 필드: @ManyToOne, @OneToOne, 대상이 엔티티(ex: m.team)
    // 컬렉션 값 연관 필드: @OneToMany, @ManyToMany, 대상이 컬렉션(ex: m.orders)

    //경로 표현식 특징
    // 상태 필드(state field): 경로 탐색의 끝, 탐색X
    // 단일 값 연관 경로: 묵시적 내부 조인(inner join) 발생, 탐색O
    // 컬렉션 값 연관 경로: 묵시적 내부 조인 발생, 탐색X
    // FROM 절에서 명시적 조인을 통해 별칭을 얻으면 별칭을 통해 탐색 가능

    //상태 필드 경로 탐색
    // JPQL: select m.username, m.age from Member m
    // SQL: select m.username, m.age from Member m
    
    //명시적 조인, 묵시적 조인
    // 명시적 조인: join 키워드 직접 사용
    // - select m from Member m join m.team t
    // 묵시적 조인: 경로 표현식에 의해 묵시적으로 SQL 조인 발생 (내부 조인만 가능)
    // - select m.team from Member m

    //경로 탐색을 사용한 묵시적 조인 시 주의사항
    // 항상 내부 조인을 사용할 것.
    // 컬렉션은 경로 탐색의 끝, 명시적 조인을 통해 별칭을 얻어야함
    // 경로 탐색은 주로 SELECT, WHERE 절에서 사용하지만 묵시적 조인으로 인해 SQL의 FROM (JOIN) 절에 영향을 줌